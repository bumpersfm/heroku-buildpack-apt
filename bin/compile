#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

# debug
# set -x

YELLOW='\033[1;33m'
RESET='\033[0m'

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
LP_DIR=`cd $(dirname $0); cd ..; pwd`

# Copying the start script
mkdir -p "$BUILD_DIR/bin/"
cp bin/start-wavefront-proxy "$BUILD_DIR/bin/"

# Read the wavefront server and token from the heroku env dir
if [ -d "$ENV_DIR" ]; then
  export "WAVEFRONT_SERVER=$(cat $ENV_DIR/WAVEFRONT_SERVER)"
  export "WAVEFRONT_TOKEN=$(cat $ENV_DIR/WAVEFRONT_TOKEN)"
fi

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# Wavefront token testing from https://github.com/wavefrontHQ/install/blob/master/install.sh
function test_wavefront_token() {
  echo "  Testing token against $WAVEFRONT_SERVER/daemon/test?token=$WAVEFRONT_TOKEN"
  STATUS=$(curl -sL -w "%{http_code}" -X POST $WAVEFRONT_SERVER/daemon/test?token=$WAVEFRONT_TOKEN -o /dev/null)

  case $STATUS in
  200)
      echo "Success"
      ;;
  401)
      echo "Failed to validate token. Token ($WAVEFRONT_TOKEN) does not belongs to a user with Agent Management permissions. ($STATUS)"
      exit -1
      ;;
  404)
      echo "Failed to validate token. ($STATUS) Will attempt to proceed."
      ;;
  *)
      echo "Failed to validate token. Please confirm that the URL is valid ($WAVEFRONT_SERVER) and that the token ($WAVEFRONT_TOKEN) belongs to a user with Agent Management permissions. ($STATUS)"
      exit -1
      ;;
  esac
}

# Wavefront specific stuff from https://github.com/wavefrontHQ/install/blob/master/install.sh
function update_wavefront_config() {
  ROOT_DIR=$1
  APP_BASE=wavefront
  APP_HOME=$ROOT_DIR/opt/$APP_BASE/$APP_BASE-proxy
  CONF_FILE=$ROOT_DIR/etc/$APP_BASE/$APP_BASE-proxy/$APP_BASE.conf

  if [[ ! -f $CONF_FILE ]]; then
    CONF_FILE=$APP_HOME/conf/$APP_BASE.conf
  fi

  echo "  Modifying Configuration File at $CONF_FILE"
  # Update the configuration file
  if [ -f $CONF_FILE ]; then
    if grep -q ^#server $CONF_FILE; then
      sed -ri s,^#server.*,server=$WAVEFRONT_SERVER,g $CONF_FILE
    else
      sed -ri s,^server.*,server=$WAVEFRONT_SERVER,g $CONF_FILE
    fi

    if grep -q ^#token $CONF_FILE; then
      sed -ri s,^#token.*,token=$WAVEFRONT_TOKEN,g $CONF_FILE
    else
      sed -ri s,^token.*,token=$WAVEFRONT_TOKEN,g $CONF_FILE
    fi

    # don't have write access to the root filesystem so have to move these files
    sed -ri s,^idFile=.*,idFile=/app/.apt/.wavefront_id,g $CONF_FILE
    sed -ri s,^buffer=.*,buffer=/tmp/wavefront-buffer,g $CONF_FILE

    # set the hostname to get a descriptive metric source
    sed -ri s,^hostname=.*,hostname=$HEROKU_APP_NAME.herokuapp.com,g $CONF_FILE
  else
    echo "Failed to locate $CONF_FILE"
    exit -1
  fi
}

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

# Remove the trailing slash if it exists.
WAVEFRONT_SERVER=${WAVEFRONT_SERVER%/}

if [[ ! "$WAVEFRONT_SERVER" =~ ^https ]]; then
    echo "Refusing to connect to $WAVEFRONT_SERVER since it is not https."
    exit -1
fi

test_wavefront_token

topic "Updating apt caches"
apt-get $APT_OPTIONS update | indent

PACKAGE="https://s3.amazonaws.com/bumpersfm/binaries/wavefront-proxy_3.24-1_amd64.deb"

topic "Fetching .debs for $PACKAGE"
PACKAGE_NAME=$(basename $PACKAGE .deb)
PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

topic "Fetching $PACKAGE"
curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing profile script"
mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

update_wavefront_config $BUILD_DIR/.apt

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"
